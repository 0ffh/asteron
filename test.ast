/*
*** todo
 - do static analysis
 - generate code
 - type literals
 - all types global (?)
*/
defun fib(n) {
  if (n<2) return n;
  else return fib(n-2)+fib(n-1);
}
fib(3);
/*
defun foo(x) {return (x+x);}
defun bar(x) {return foo(x);}
defun fib(n) {
  if (n<2) return n;
  else return fib(n-2)+fib(n-1);
}

defun main(string[] args=[]) {
  prln("main");
  prln(foo(1));
  prln(foo(1.1));
  prln(bar(1));
  prln(bar(1.1));
  prln(fib(3));
}
main();
/*
defun foo(...) {
  for (var k=0;k<ellipse.length();k+=1) {
    prln(k,":",ellipse[k]);
  }
}
foo(1,2,3,"a",3.141,"z");
prln(foo);
prln(foo[]);
prln(foo[int]);
prln(foo[string]);
prln("test");
defun foo(...) {
  var s="";
  for (var k=0;k<ellipse.length();k+=1) {
    s~=tostr(k,":",ellipse[k],"  ");
  }
  return s;
}
prln(foo[string,int]);
prln(typeof(foo[string,int]));
prln(foo[string,int](2,1,3));
/*
defun foo(int ...) return "(... int)";
defun foo(int a) return "(int)";
defun foo(int a,int b) return "(int,int)";
prln(foo[int]);
prln(foo[string]);
prln(foo[int,int]);
prln(foo[int,int,int]);
prln(foo[string,int,int]);
prln(foo[int,int,string]);
prln(typeof(foo[int]));
prln(typeof(foo[string]));
prln(typeof(foo[int,int]));
prln(typeof(foo[int,int,int]));
prln(typeof(foo[string,int,int]));
prln(typeof(foo[int,int,string]));

var x=foo[string,int,int];
prln(x);
prln(x(2));
*/

