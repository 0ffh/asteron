

//----------------------------------------------------------------------
//--- minimal testing framework
var testname="";
var errors=0,tests=0;
var suberr=0,subtest=0;
defun start(tn) {
  tests=tests+1;
  testname=tn;
  subtest=0;
  suberr=0;
  prln("--- testing",testname);
}
defun test(actual,expected) {
  prln(actual,"?=",expected);
  subtest=subtest+1;
  if (expected!=actual) {
    prln("subtest",subtest,"failed : expected",expected,"but got",actual);
    suberr=suberr+1;
  }
}
defun finish() {
  if (suberr) {
    prln("failed",suberr,"of",subtest,"subtests");
    errors=errors+1;
  } else {
    prln(testname,"succeeded all subtests");
  }
  prln();
}
defun summary() {
  prln("*** test summary");
  if (errors) {
    prln(errors,"of",tests,"tests failed!");
  } else {
    prln("All tests succeeded!");
  }
  pr("Total time spent on all tests: ");
  toc();
}
defun test1() {
  start("structs (deftype)");
  deftype ts struct{string a,int i,float f};
  //test("(struct (any a) (int i) (float f))",tostr(t));
  defun dotset(ts@ x,string idx,value) return dotset(unpack(x@),idx,value);
  defun dotget(ts x,string idx) return dotget(unpack(x),idx);
  defun tostr(ts x) return "{a='"~tostr(x.a)~"',i="~tostr(x.i)~",f="~tostr(x.f)~"}";
  var ts tsy;
  test(tostr(tsy),"{a='',i=0,f=nan}");
  tsy.a="prlnx";
  tsy.a="prlny";
  test(tsy.a,"prlny");
  //test(tostr(tsy),"{a='prlny',i=0,f=0}");
  tsy.i=2;
  test(tsy.i,2);
  tsy.f=1.0;
  //test(tostr(tsy),"{a='prlny',i=2,f=1}");
  finish();
}
defun main() {
  test1();
}
