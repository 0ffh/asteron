/*defun pr(...) {
  var k;
  for (k=0;k<ellipse.length();k+=1) {
    _pr(ellipse[k]);
  }
}
defun prln(...) {
  var k;
  for (k=0;k<ellipse.length();k+=1) {
    _pr(ellipse[k]);
  }
  _prln();
}*/
//----------------------------------------------------------------------
//--- minimal testing framework
var testname="";
var errors=0,tests=0;
var suberr=0,subtest=0;
defun start(tn) {
  tests=tests+1;
  testname=tn;
  subtest=0;
  suberr=0;
  prln("--- testing",testname);
}
defun test(actual,expected) {
//   prln(actual,"?=",expected);
  subtest=subtest+1;
  if (expected!=actual) {
    prln("subtest",subtest,"failed : expected",expected,"but got",actual);
    suberr=suberr+1;
  }
}
defun finish() {
  if (suberr) {
    prln("failed",suberr,"of",subtest,"subtests");
    errors=errors+1;
  } else {
    prln(testname,"succeeded all subtests");
  }
  prln();
}
defun summary() {
  prln("*** test summary");
  if (errors) {
    prln(errors,"of",tests,"tests failed!");
  } else {
    prln("All tests succeeded!");
  }
  pr("Total time spent on all tests: ");
  toc();
}
//----------------------------------------------------------------------
//--- fibonacci parameter and expected result
var fib_par=12,fib_res=144;
//var fib_par=35,fib_res=9227465;
//----------------------------------------------------------------------
//--- tests
defun test1() {
  start("fibonacci");
  defun fib(n) {
    if (n<2) {
      return n;
    } else {
      return fib(n-2)+fib(n-1);
    }
  }
  test(fib(fib_par),fib_res);
  finish();
}
defun test2() {
  start("loops");
  var i=0;
  // for
  pr("for ");
  for (var k=0;k<10;k=k+1) {
    pr(k);
  }
  prln();
  test(i,0);
  if (i!=0) {
    prln("local scope in for loop is broken");
    i=0;
  }
  // while
  pr("while ");
  while (i<10) {
    pr(i);
    i=i+1;
  }
  prln();
  test(i,10);
  // do
  pr("do ");
  i=0;
  do {
    pr(i);
    i=i+1;
  } while (i<10);
  test(i,10);
  prln();
  //
  finish();
}
defun test3() {
  start("return");
  defun fib(n) {
    if (n<2) {return n;}
    return fib(n-2)+fib(n-1);
  }
  test(fib(fib_par),fib_res);
  finish();
}
defun test4() {
  start("break");
  var i=0;
  while (i<20) {
    if (i==10) {
      break;
    }
    i=i+1;
  }
  test(i,10);
  finish();
}
defun test5() {
  start("continue");
  var i=1;
  var ok=1;
  while (i) {
    i=0;
    continue;
    ok=0;
  }
  test(ok,1);
  finish();
}
defun test6() {
  start("switch");
  var ok=0;
  switch (0) {
    // with blocks...
    case 0: {ok=1;break;}
    case 1: {ok=0;break;}
  }
  switch (1) {
    // ...or without
    case 0: break;
    case 1: ok=ok+2;break;
  }
  test(ok,3);
  finish();
}
var ok;
defun test7() {
  start("return from switch");
  ok=1;
  defun foo(n) {
    switch (n) {
      case 0: break;
      case 1: return 1;
      case 2: ok=0;
    }
    return 0;
  }
  test(ok,1);
  test(foo(1),1);
  finish();
}
defun test8() {
  start("switch fallthrough");
  ok=0;
  switch (1) {
    case 0: ok=ok+1;
    case 1: ok=ok+1;
    case 2: ok=ok+1;
  }
  test(ok,2);
  finish();
}
defun test9() {
  start("arrays");
  var k=0;
  var a=[0,1,2,3,4];
  test(length(a),5);
  test(a[0],0);
  test(a[1],1);
  test(a[2],2);
  test(a[3],3);
  finish();
}
defun test10() {
  start("references");
  var int i;
  var pi;
  pi=&i;
  test(pi@,i);
  i=10;
  test(pi@,i);
  finish();
}
defun test11() {
  start("signature dispatch");
  defun foo(a,b) {return "foo-any-any";}
  defun foo(float a,float b) {return "foo-float-float";}
  defun foo(int a,int b) {return "foo-int-int";}
  defun foo(int a,b) {return "foo-int-any";}
  defun foo(int a,string b) {return "foo-int-string";}
  test(foo("1","2"),"foo-any-any");
  test(foo(1,2),"foo-int-int");
  test(foo(1.0,2.0),"foo-float-float");
  test(foo(1.0,2),"foo-any-any");
  test(foo(1,2.0),"foo-int-any");
  test(foo(1,"2"),"foo-int-string");
  finish();
}
defun test12() {
  start("evil blockless constructs");
  var a=[0,1,2,3];
  test(length(a),4);
  var k;
  for (k=0;k<length(a);k=k+1) test(a[k],k);
  if (1) test(0,0); else test(0,1);
  if (0) test(0,1); else test(0,0);
  for (k=0;k<length(a);k=k+1) test(a[k],k);
  test(k,length(a));
  k=0;
  while (k<length(a)) k=k+1;
  test(k,length(a));
  k=0;
  do k=k+1; while (k<length(a));
  test(k,length(a));
  defun foo(a,b) return a+b;
  test(foo(2,3),5);
  finish();
}
defun test13() {
  start("types (1)");
  var int i;
  var float f;
//   test(typeof(i),int);
//   test(typeof(f),float);
  defun foo(int a) {return "foo-int";}
  defun foo(float a) {return "foo-float";}
  defun foo(string a) {return "foo-string";}
  test(foo(1),"foo-int");
  test(foo(1.0),"foo-float");
  test(foo("2"),"foo-string");
  finish();
}
/*defun test14() {
  start("default arguments");
  defun foo(a,b=2) return tostr([a,b]);
  test(foo(0,1),"[0 1]");
  test(foo(1),"[1 2]");
//   test(typeof(new(array(int))),array(int));
//   test(typeof(new(array())),array(any));
  finish();
}*/
defun test15() {
  start("structs (anonymous)");
  var struct{string a,int i,float f} asx;
//  test(tostr(asx),"{a='',i=0,f=0}");
  asx.a="prlnx";
  test(asx.a,"prlnx");
//  test(tostr(asx),"{a='prlnx',i=0,f=0}");
  asx.i=1;
  test(asx.i,1);
  asx.f=2.0;
//  test(tostr(asx),"{a='prlnx',i=1,f=2}");
  finish();
}/*
defun test16() {
  start("structs (aliastype)");
  aliastype at struct{string a,int i,float f};
  var at x;
  test(tostr(x),"{a='',i=0,f=0}");
  x.a="prlnx";
  test(x.a,"prlnx");
  test(tostr(x),"{a='prlnx',i=0,f=0}");
  x.i=1;
  test(x.i,1);
  x.f=2.0;
  test(tostr(x),"{a='prlnx',i=1,f=2}");
  finish();
}*/
/*defun test17() {
  start("structs (deftype)");
  deftype ts struct{string a,int i,float f};
  //test("(struct (any a) (int i) (float f))",tostr(t));
  defun set(ts x,string idx,value) set(unpack(x),idx,value);
  defun get(ts x,string idx) return get(unpack(x),idx);
  var ts tsy;
  test(tostr(tsy),"{a='',i=0,f=0}");
  tsy.a="prlny";
  test(tsy.a,"prlny");
  test(tostr(tsy),"{a='prlny',i=0,f=0}");
  tsy.i=2;
  test(tsy.i,2);
  tsy.f=1.0;
  test(tostr(tsy),"{a='prlny',i=2,f=1}");
  finish();
}
/*defun test18() {
  start("unions (anonymous)");
  var union{string a,int i,float f} z;
  test(tostr(z),"{a,i,f}");
  z.a="prlnz";
  test(z.a,"prlnz");
  test(tostr(z),"{a='prlnz',i,f}");
  z.i=1;
  test(tostr(z),"{a,i=1,f}");
  z.f=2.0;
  test(tostr(z),"{a,i,f=2}");
  finish();
}
defun test19() {
  start("unions (deftype)");
  deftype tu union{string a,int i,float f};
  //test("(union (any a) (int i) (float f))",tostr(u));
  defun set(tu x,string idx,value) set(unpack(x),idx,value);
  defun get(tu x,string idx) return get(unpack(x),idx);
  var tu z;
  test(tostr(z),"{a,i,f}");
  z.a="prlnz";
  test(z.a,"prlnz");
  test(tostr(z),"{a='prlnz',i,f}");
  z.i=1;
  test(tostr(z),"{a,i=1,f}");
  z.f=2.0;
  test(tostr(z),"{a,i,f=2}");
  finish();
}
defun test20() {
  start("aliastype");
  aliastype intarr int[];
  //test(tostr(intarr),"intarr");
  var intarr ia;
  test(tostr(ia),"[]");
  resize(ia,4);
  test(tostr(ia),"[0,0,0,0]");
  for (var k=0;k<4;k=k+1) ia[k]=k;
  test(tostr(ia),"[0,1,2,3]");
  finish();
}*/
defun test21() {
  start("ternary dispatch");
  var int xa;
  var float xb;
  defun foo(int x) return "int";
  defun foo(float x) return "float";
  test(xa.foo(),"int");
  test(xb.foo(),"float");
  finish();
}
/*defun test22() {
  start("ternary dispatch (2)");
  var struct{int x} a;
  var struct{float x} b;
  defun foo(int x) return "int";
  defun foo(float x) return "float";
  test(a.x.foo(),"int");
  test(b.x.foo(),"float");
  finish();
}*/
defun test23() {
  start("array concatenation");
  var int[] a;
  a=[0,1];
  test(a,[0,1]);
  test(a~2,[0,1,2]);
  test(a~[2],[0,1,2]);
  a~=2;
  test(a,[0,1,2]);
  a~=[3];
  test(a,[0,1,2,3]);
  finish();
}
//----------------------------------------------------------------------
//--- summary
defun mainx() {
  tic();
  prln();
  prln("-------------------- running test suite now");
  prln();
  test1();
  test2();
  test3();
  test4();
  test5();
  test6();
  test7();
  test8();
  test9();
  test10();
  test11();
  test12();
  test13();
//   test14();
   test15();
//   test16();
//   test17();
//   test18();
//   test19();
//  test20();
  test21();
//  test22();
  test23();
  summary();
}
defun mainy() {
  test22();
  summary();
}
defun main() {
  mainx();
}
